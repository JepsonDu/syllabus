# knitr::opts_knit$set(root.dir = '/Users/jhersh/Dropbox/Chapman/Teaching/BUS_696/problem_sets')
# setwd('/Users/jhersh/Dropbox/Chapman/Teaching/BUS_696/problem_sets')
set.seed(1818)
options(width=60)
options(scipen = 10)
## Global Options
# set SOLUTIONS_SWITCH = 1 to print code/solutions
SOLUTIONS_SWITCH <- 0
opts_chunk$set(include = SOLUTIONS_SWITCH)
# general rchunk code options
opts_chunk$set(tidy.opts=list(width.wrap=45),tidy=TRUE, size = "vsmall")
opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
autodep = TRUE,
cache.comments = FALSE,
collapse = TRUE,
fig.width = 4,
fig.height = 5,
fig.align='center')
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes000s = cast_total_facebook_likes / 1000)
# knitr::opts_knit$set(root.dir = '/Users/jhersh/Dropbox/Chapman/Teaching/BUS_696/problem_sets')
setwd('~/opim241/mv-assignments/')
library(knitr)
library(tidyverse)
# knitr::opts_knit$set(root.dir = '/Users/jhersh/Dropbox/Chapman/Teaching/BUS_696/problem_sets')
setwd('~/opim241/mv-assignments/')
set.seed(1818)
options(width=60)
options(scipen = 10)
## Global Options
# set SOLUTIONS_SWITCH = 1 to print code/solutions
SOLUTIONS_SWITCH <- 0
opts_chunk$set(include = SOLUTIONS_SWITCH)
# general rchunk code options
opts_chunk$set(tidy.opts=list(width.wrap=45),tidy=TRUE, size = "vsmall")
opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
autodep = TRUE,
cache.comments = FALSE,
collapse = TRUE,
fig.width = 4,
fig.height = 5,
fig.align='center')
#library('tidyverse')
#options(scipen = 10)
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes000s = cast_total_facebook_likes / 1000)
movies <- movies %>% mutate(genre_main = factor(genre_main) %>% fct_drop())
library(tidyverse)
set.seed(1861)
train_idx <- sample(1:nrow(movies), .8*nrow(movies))
movies_train <- movies %>% slice(train_idx)
movies_test <- movies %>% slice(-train_idx)
nrow(movies_test)
nrow(movies_train)
nrow(movies_test)
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
print(cormat[,"profitM"])
```{r q4_e-2}
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
print(cormat[,"profitM"])
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
corrplot::corrplot(cormat)
mod1 <- lm(profitM ~ imdb_score, data = movies_train)
summary(mod1)
mod2 <- lm(profitM ~ imdb_score + cast_total_facebook_likes000s, data = movies_train)
summary(mod2)
movies_train <-
movies_train %>%  mutate(rating_simple = fct_lump(content_rating, n = 4))
table(movies_train$rating_simple)
movies %>% group_by(content_rating) %>%
summarize(average_profitM = mean(profitM, na.rm = TRUE)) %>%
arrange(desc(average_profitM))
movies %>% count(content_rating)
movies %>% count(content_rating) %>% arrange(desc(n))
movies %>% count(content_rating) %>% top_n(4)
movies2 <-
movies %>% group_by(content_rating) %>%
summarize(average_profitM = mean(profitM, na.rm = TRUE)) %>%
arrange(desc(average_profitM))
movies2
values_to_combine <- c("M", "Approved", "GP", "G")
movies2 %>% mutate(rating_simple = ifelse(content_rating %in% values_to_combine, content_rating, "Other"))
movies2 <-
movies2 %>% mutate(rating_simple = ifelse(content_rating %in% values_to_combine, content_rating, "Other"))
movies2 <- na.omit(movies2)
movies2
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes100s = cast_total_facebook_likes / 100)
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes100s = cast_total_facebook_likes / 100)
set.seed(1861)
train_idx <- sample(1:nrow(movies), .8*nrow(movies))
movies_train_old <- movies %>% slice(train_idx)
movies_test_old <- movies %>% slice(-train_idx)
library(tidymodels)
movies_split <- initial_split(movies, prop = 0.8)
movies_train <- training(movies_split)
movies_test <- testing(movies_split)
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
print(cormat[,"profitM"])
corrplot::corrplot(cormat)
movies_train %>%
count(content_rating) %>% top_n(4)
movies_test
movies
movies %>%
count(content_rating)
movies %>%
count(content_rating)
?top_n
movies %>%
count(content_rating) %>% top_n(4)
movies %>%
count(content_rating) %>%
mutatate(last_col = "nothing")
movies %>%
count(content_rating) %>%
mutate(last_col = "nothing")
movies %>%
count(content_rating) %>%
mutate(last_col = "nothing") %>%
top_n(4)
movies %>%
count(content_rating) %>%
mutate(last_col = "nothing") %>%
top_n(4, wt = n)
movies %>%
count(content_rating) %>%
mutate(last_col = 1:15)
movies %>%
count(content_rating) %>%
mutate(last_col = 1:15) %>%
top_n(4)
movies %>%
count(content_rating) %>%
#  mutate(last_col = 1:15) %>%
top_n(4, wt = n)
movies_train %>%
mutate(simple_rating = ifelse(content_rating %in% top_4, content_rating, "other")) %>%
count(simple_rating)
top_4 <- c("G", "PG", "PG-13", "R")
movies_train %>%
mutate(simple_rating = ifelse(content_rating %in% top_4, content_rating, "other")) %>%
count(simple_rating)
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes100s = cast_total_facebook_likes / 100)
movies %>%
count(content_rating)
movies_by_content_rating <- movies %>%
count(content_rating)
View(movies_by_content_rating)
View(movies)
movies %>% glimpse()
movies %>%
summarize(avg_roi = mean(roi, na.rm = T)
movies %>%
summarize(avg_roi = mean(roi, na.rm = T))
movies %>%
group_by(content_rating) %>%
summarize(avg_roi = mean(profitM, na.rm = T))
movies %>%
group_by(content_rating) %>%
summarize(avg_profit = mean(profitM, na.rm = T))
mystrint <- c(NA, "", "non-blanks")
mystrint
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies %>% count(content_rating)
mystrint
is.na(mystrint)
is.na(mystrint)
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes100s = cast_total_facebook_likes / 100,
roi = profitM / budgetM)
roi_by_actor <- movies %>%
group_by(actor_1_name) %>%
summarize(mean_roi = mean(roi, na.rm = T))
View(roi_by_actor)
roi_by_actor %>% top_n(3)
roi_by_actor %>% arrange(roi)
roi_by_actor %>% arrange(mean_roi)
roi_by_actor %>% arrange(desc(mean_roi))
roi_by_actor %>% arrange(desc(mean_roi)) %>% slice(1:30)
?topn
?top_n
roi_by_actor %>% arrange(mean_roi)
roi_by_actor %>% arrange(mean_roi) %>% slice(1:30)
movies <- roi_by_actor %>% arrange(mean_roi) %>% slice(1:30)
View(movies)
cormat <- cor(movies_train %>% select_if(is.numeric) %>% drop_na())
cormat
print(cormat[,"profitM"])
library(corrplot)
corrplot(cormat)
moves_train <-
movies_train %>%
mutate(simple_rating = ifelse(content_rating %in% top_4, content_rating, "other"))
movies_train
movies_train <- movies_train %>%
mutate(simple_rating = ifelse(content_rating %in% top_4, content_rating, "other")) %>%
count(simple_rating)
movies <- read_csv("~/opim241/mv-assignments/movie_metadata.csv")
movies <- movies %>% filter(budget < 400000000) %>% filter(content_rating != "",
content_rating != "Not Rated")
movies <- movies %>%
mutate(genre_main = unlist(map(strsplit(as.character(movies$genres),"\\|"),1)),
grossM = gross / 1000000,
budgetM = budget / 1000000,
profitM = grossM - budgetM,
cast_total_facebook_likes100s = cast_total_facebook_likes / 100,
roi = profitM / budgetM)
library(tidymodels)
set.seed(1861)
movies_split <- initial_split(movies, prop = 0.8)
movies_train <- training(movies_split)
movies_test <- testing(movies_split)
movies %>%
count(content_rating) %>%
#  mutate(last_col = 1:15) %>%
top_n(4, wt = n)
top_4 <- c("G", "PG", "PG-13", "R")
movies_train <- movies_train %>%
mutate(simple_rating = ifelse(content_rating %in% top_4, content_rating, "other"))
movies_train %>% glimpse()
source('~/.active-rstudio-document', echo=TRUE)
lm(profitM ~ simple_rating, data = movies_train)
movies_train <- movies_train %>%
arrange(roi)
lm(profitM ~ simple_rating, data = movies_train)
movies_train <- movies_train %>%
arrange(desc(roi))
lm(profitM ~ simple_rating, data = movies_train)
movies_train <- movies_train %>%
arrange(desc(roi))
lm(profitM ~ simple_rating, data = movies_train)
devtools::install_github("tidyverse/dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
packageVersion("dplyr")
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
# load useful libraries
library(tidyverse)
library(recipes) # could also load the tidymodels package
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
muffin_cupcake_data_orig
library(janitor)
muffin_cupcake_data_orig <-
muffin_cupcake_data_orig %>%
clean_names()
muffin_cupcake_data_orig
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
# load useful libraries
library(tidyverse)
library(recipes) # could also load the tidymodels package
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
muffin_cupcake_data_orig
library(janitor)
muffin_cupcake_data <-
muffin_cupcake_data_orig %>%
clean_names()
muffin_cupcake_data_orig
# add an additional ingredients column that is categorical
muffin_cupcake_data <- muffin_cupcake_data %>%
mutate(additional_ingredients = c("fruit",
"fruit",
"none",
"nuts",
"fruit",
"fruit",
"nuts",
"none",
"none",
"nuts",
"icing",
"icing",
"fruit",
"none",
"fruit",
"icing",
"none",
"fruit",
"icing",
"icing"))
# add some random missing values here and there just for fun
set.seed(26738)
muffin_cupcake_data <- muffin_cupcake_data %>%
# only add missing values to numeric columns
mutate_if(is.numeric,
function(x) {
# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
muffin_cupcake_data
View(muffin_cupcake_data)
View(muffin_cupcake_data_orig)
View(muffin_cupcake_data)
View(muffin_cupcake_data_orig)
View(muffin_cupcake_data)
muffin_cupcake_split <- initial_split(muffin_cupcake_data)
library(rsample)
muffin_cupcake_split <- initial_split(muffin_cupcake_data)
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
muffin_cupcake_train
library(tidyverse)
hotels <-
read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv")
hotel_stays %>% count(children)
hotel_stays <- hotels %>%
filter(is_canceled == 0) %>%
mutate(
children = case_when(
children + babies > 0 ~ "children",
TRUE ~ "none"
),
required_car_parking_spaces = case_when(
required_car_parking_spaces > 0 ~ "parking",
TRUE ~ "none"
)
) %>%
select(-is_canceled, -reservation_status, -babies)
hotel_stays %>% count(children)
library(skimr)
skim(hotel_stays)
hotel_stays %>%
mutate(arrival_date_month = factor(arrival_date_month,
levels = month.name
)) %>%
count(hotel, arrival_date_month, children) %>%
group_by(hotel, children) %>%
mutate(proportion = n / sum(n)) %>%
ggplot(aes(arrival_date_month, proportion, fill = children)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~hotel, nrow = 2) +
labs(
x = NULL,
y = "Proportion of hotel stays",
fill = NULL
)
hotel_stays %>%
count(hotel, required_car_parking_spaces, children) %>%
group_by(hotel, children) %>%
mutate(proportion = n / sum(n)) %>%
ggplot(aes(required_car_parking_spaces, proportion, fill = children)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~hotel, nrow = 2) +
labs(
x = NULL,
y = "Proportion of hotel stays",
fill = NULL
)
library(GGally)
hotel_stays %>%
select(
children, adr,
required_car_parking_spaces,
total_of_special_requests
) %>%
ggpairs(mapping = aes(color = children))
api <- plumber::plumb("myrestapi.R")
api$run(host = "127.0.0.1", port = 8000)
exit
wine <- read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data")
library(tidyverse)
wine <- read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data")
wine
wine <-
read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
col_names = c("cultivar", "alcohol", "malic_acid", "ash", "alcalinity_of_ash",
"magnesium", "total_phenols", "proanthocyanin", "color_intensity",
"hue", "od280_od315_of_diluted_wines", "proline"))
wine
wine %>% glimpse()
View(wine)
wine <-
read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
col_names = c("cultivar", "alcohol", "malic_acid", "ash", "alcalinity_of_ash",
"magnesium", "total_phenols", "proanthocyanin", "color_intensity",
"hue", "od280_od315_of_diluted_wines", "proline"))
problems(wine)
k3 <- kmeans(wine %>% select(-cultivar), centers = 3)
k3
library(useful)
plot(k3)
df <- wine %>% select(-cultivar)
k3 <- kmeans(df, centers = 3)
library(useful)
plot(k3, data = df)
plot(k3, data = wine, class = "cultivar")
k3_n25 <- kmeans(df, centers = 3, nstart = 25)
best <- FitKMeans(df, max.clusters = 20, nstart = 25)
best
PlotHartigan(best)
table(wine$cultivar, k3_n25$cluster)
plot(table(wine$cultivar, k3_n25$cluster))
library(cluster)
gap <- clusGap(df, FUNcluster = pam, K.max = 20)
gap
str(gap)
gap$Tab
tibble(gap$Tab)
gap_df <- tibble(gap$Tab)
ggplot(gap_df, aes(x = 1:nrow(gap_df))) +
geom_line(aes(y = logW), color = "blue") +
geom_point(aes(y = logW), color = "blue")
gap %>% glimpse()
gap_df %>% glimpse()
gap_df <- as.data.frame(gap$Tab)
gap_df
ggplot(gap_df, aes(x = 1:nrow(gap_df))) +
geom_line(aes(y = logW), color = "blue") +
geom_point(aes(y = logW), color = "blue")
ggplot(gap_df, aes(x = 1:nrow(gap_df))) +
geom_line(aes(y = logW), color = "blue") +
geom_point(aes(y = logW), color = "blue") +
geom_line(aes(y = E.logW), color = "green") +
geom_point(aes(y = E.logW), color = "green")
ggplot(gap_df, aes(x = 1:nrow(gap_df))) +
geom_line(aes(y = logW), color = "blue") +
geom_point(aes(y = logW), color = "blue") +
geom_line(aes(y = E.logW), color = "green") +
geom_point(aes(y = E.logW), color = "green") +
labs(x = "Number of clusters")
ggplot(gap_df, aes(x = 1:nrow(gap_df))) +
geom_line(aes(y = gap), color = "red") +
geom_point(aes(y = gap), color = "red") +
geom_errorbar(aes(ymin = gap - SE.sim, ymax = gap + SE.sim), color = "red") +
labs(x = "Number of clusters", y = "Gap")
sample(1: 7 , replace = F)
install.packates("tidyverse", "tidymodels")
install.packages("tidyverse", "tidymodels")
install.packages("shiny","leaflet","flexdashboard")
install.packages(c("shiny","leaflet","flexdashboard"))
.libPaths()
.libloc
libloc
library()
install.packages(c("sf"))
install.packages(c("sp"))
install.packages(c("sf"))
install.packages(c("units"))
install.packages(c("sf"))
library()
install.packages(c("xaringan"))
install.packages(c("rpart", "glmnet", "xgboost"))
install.packages("xaringan")
install.packages("xaringanthemer")
install.packages("xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra", dependencies = TRUE)
install.packages("devtools")
devtools::install_github("gadenbuie/xaringanExtra", dependencies = TRUE)
devtools::install_github("gadenbuie/xaringanthemer@dev", dependencies = TRUE)
devtools::install_github("gadenbuie/metathis", dependencies = TRUE)
install.packages(c("glmnet", "sf", "tidyr", "tidyselect", "xaringanthemer"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial"), lib="/usr/local/Cellar/r/4.0.0_1/lib/R/library")
setwd("dnsc6290/syllabus/")
